import os
from aiogram import F, Router
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand,
    BotCommandScopeDefault, MenuButtonCommands
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID", "1780044773"))

router = Router()

# FSM
class OrderStates(StatesGroup):
    choosing = State()
    quantity = State()
    add_more = State()
    collecting_name = State()
    collecting_phone = State()
    collecting_address = State()
    waiting_payment = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")], [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]],
        resize_keyboard=True
    )

def products_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∫—Ä–∞ —â—É–∫–∏ ‚Äì 2450‚ÇΩ / 0.5–∫–≥", callback_data="item_1")],
        [InlineKeyboardButton(text="–ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è ‚Äì 3000‚ÇΩ / 0.5–∫–≥", callback_data="item_2")]
    ])

def quantity_buttons(qty):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{qty}"),
            InlineKeyboardButton(text=f"{qty} —à—Ç.", callback_data="none"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{qty}")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="confirm_qty")
        ]
    ])

def next_step_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="edit_order")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="proceed")]
    ])

def info_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É", url="https://telegra.ph/Dobro-pozhalovat-v-magazin-Astrahanskoe-Zoloto-05-07")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url="https://t.me/GoldAstraShop")],
        [InlineKeyboardButton(text="üì¶ –û–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –ê–≤–∏—Ç–æ", url="https://www.avito.ru/brands/i151719409?src=sharing")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(F.text.in_(['/start', 'start']))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ¬´–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –∑–æ–ª–æ—Ç–æ¬ª!</b>\n\n"
        "üêü –°–≤–µ–∂–∞—è –∏–∫—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –°–î–≠–ö.\n\n"
        "‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 1 –∫–≥ (–º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu()
    )

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def send_info(message: Message):
    await message.answer(
        "‚Ñπ<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî <b>–ø–∏—à–∏—Ç–µ</b>, –º—ã –æ—Ç–≤–µ—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!\n\n"
        "üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: <b>@oh_my_nami\n</b>"
        "üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: \n"
        "<b>@GoldAstraShop</b>\n"
        "üì¶ –û–ø—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–æ—Ç 20 –∫–≥): <b>@oh_my_nami</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –ó–æ–ª–æ—Ç–æ</b>! üêüüíõ", reply_markup=info_menu()
    )

@router.message(F.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def choose_product(message: Message, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await state.update_data(cart=[], total_weight=0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫—Ä—É:", reply_markup=products_menu())

@router.callback_query(F.data.startswith("item_"))
async def handle_item(call: CallbackQuery, state: FSMContext):
    item = call.data.split("_")[1]
    product_info = {
        "1": {
            "name": "üêü <b>–ò–∫—Ä–∞ —â—É–∫–∏</b>",
            "price": 2450,
            "photo": "images/pike.jpg",
            "desc": (
                "‚ú® <b>–û—Ö–ª–∞–∂–¥—ë–Ω–Ω–∞—è, —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è</b>\n"
                "–°–æ—Å—Ç–∞–≤: <b>–∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å</b>.\n"
                "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
                "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
                "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
                "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
                "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b> / 548 –∫–î–∂\n\n"
                "üëå <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "–ò–∫—Ä–∞ —â—É–∫–∏ ‚Äî —ç—Ç–æ –¥–µ–ª–∏–∫–∞—Ç–µ—Å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –±–æ–≥–∞—Ç—ã–º —Å–æ—Å—Ç–∞–≤–æ–º. "
                "–û–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –ª—é–±–æ–º—É —Å—Ç–æ–ª—É –∏ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–∫—É—Å–æ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è."
            )
        },
        "2": {
            "name": "üé® <b>–ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è</b>",
            "price": 3000,
            "photo": "images/pike_colored.jpg",
            "desc": (
                "‚ú® <b>–°–æ—Å—Ç–∞–≤:</b> –∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å, –∫—Ä–∞—Å–∏—Ç–µ–ª—å –í–ê–†–≠–õ–¨.\n"
                "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
                "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
                "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
                "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
                "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b> / 548 –∫–î–∂\n\n"
                "üëå <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "–ù–∞—Å—ã—â–µ–Ω–Ω–∞—è –∏ —è—Ä–∫–∞—è –∏–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è –ø—Ä–∏–≤–Ω–µ—Å–µ—Ç –≤ –≤–∞—à—É —Ç—Ä–∞–ø–µ–∑—É —è—Ä–∫–∏–µ –∫—Ä–∞—Å–∫–∏ –∏ –≤–∫—É—Å! "
                "–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö –Ω–µ–æ–±—ã—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–µ–ª–∏–∫–∞—Ç–µ—Å–æ–º."
            )
        }
    }
    selected_product = product_info.get(item)
    if selected_product:
        await state.update_data(selected_product=selected_product, qty=1)
        photo = FSInputFile(selected_product["photo"])
        await call.message.answer_photo(photo, caption=f"{selected_product['name']}\n{selected_product['desc']}\n–¶–µ–Ω–∞: {selected_product['price']}‚ÇΩ")
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫ (–ø–æ 0.5 –∫–≥):", reply_markup=quantity_buttons(1))
        await state.set_state(OrderStates.quantity)
    await call.answer()

@router.callback_query(F.data.startswith("increase_"))
async def increase_quantity(call: CallbackQuery, state: FSMContext):
    qty = int(call.data.split("_")[1]) + 1
    await state.update_data(qty=qty)
    await call.message.edit_reply_markup(reply_markup=quantity_buttons(qty))
    await call.answer()

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(call: CallbackQuery, state: FSMContext):
    qty = int(call.data.split("_")[1]) - 1
    if qty < 1:
        qty = 1
    await state.update_data(qty=qty)
    await call.message.edit_reply_markup(reply_markup=quantity_buttons(qty))
    await call.answer()

@router.callback_query(F.data == "none")
async def do_nothing(call: CallbackQuery):
    await call.answer()

@router.callback_query(F.data == "confirm_qty")
async def confirm_quantity(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product = data["selected_product"]
    qty = data["qty"]
    weight = qty * 0.5
    new_item = {"name": product["name"], "qty": qty, "weight": weight, "sum": product["price"] * qty}
    cart = data.get("cart", [])
    cart.append(new_item)
    total_weight = sum(item['weight'] for item in cart)
    await state.update_data(cart=cart, total_weight=total_weight)
    await call.message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product['name']} ‚Äî {qty} —à—Ç. ({weight} –∫–≥)", reply_markup=next_step_menu())
    await state.set_state(OrderStates.add_more)
    await call.answer()

@router.callback_query(F.data == "add_more")
async def add_more_items(call: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_menu())
    await call.answer()

@router.callback_query(F.data == "edit_order")
async def edit_order(call: CallbackQuery, state: FSMContext):
    await state.update_data(cart=[], total_weight=0)
    await state.set_state(OrderStates.choosing)
    await call.message.answer("üßπ –ó–∞–∫–∞–∑ —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ:", reply_markup=products_menu())
    await call.answer()

@router.callback_query(F.data == "proceed")
async def proceed_to_checkout(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("total_weight", 0) < 1:
        await call.message.answer("‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 1 –∫–≥.")
        return
    await state.set_state(OrderStates.collecting_name)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await call.answer()

@router.message(OrderStates.collecting_name)
async def collect_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.collecting_phone)

@router.message(OrderStates.collecting_phone)
async def collect_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–î–≠–ö):")
    await state.set_state(OrderStates.collecting_address)

@router.message(OrderStates.collecting_address)
async def collect_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    data = await state.get_data()
    text = "üßæ <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
    total = 0
    for item in data['cart']:
        text += f"{item['name']} ‚Äî {item['qty']} —à—Ç. ({item['weight']} –∫–≥) = {item['sum']}‚ÇΩ\n"
        total += item['sum']
    text += f"\n<b>–û–±—â–∏–π –≤–µ—Å:</b> {data['total_weight']} –∫–≥\n<b>–°—É–º–º–∞:</b> {total} ‚ÇΩ"
    await message.answer(text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º", callback_data="pay_manual")]
    ]))
    await state.set_state(OrderStates.waiting_payment)

@router.callback_query(F.data == "pay_manual")
async def pay_manual(call: CallbackQuery):
    await call.message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n<b>–ö–∞—Ä—Ç–∞:</b> 2200700974216722\n<b>–ò–º—è:</b> –ê–Ω–∞—Ç–æ–ª–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")
    await call.answer()

@router.message(OrderStates.waiting_payment)
async def receive_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    bot = message.bot
    if message.photo or message.document:
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω.")
        admin_text = "üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
        for item in data['cart']:
            admin_text += f"{item['name']} ‚Äî {item['qty']} —à—Ç. = {item['sum']}‚ÇΩ\n"
        admin_text += f"\n<b>–ò–º—è:</b> {data['name']}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n<b>–ê–¥—Ä–µ—Å:</b> {data['address']}"
        await bot.send_message(ADMIN_ID, admin_text)
        if message.photo:
            await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption="–ß–µ–∫")
        elif message.document:
            await bot.send_document(ADMIN_ID, message.document.file_id, caption="–ß–µ–∫")
        await state.clear()
    else:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —á–µ–∫–∞.")


