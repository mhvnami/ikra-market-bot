import os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from utils.cdek import CDEKClient

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CDEK_CLIENT_ID = os.getenv("CDEK_CLIENT_ID")
CDEK_CLIENT_SECRET = os.getenv("CDEK_CLIENT_SECRET")
SENDER_CITY_CODE = os.getenv("SENDER_CITY_CODE")
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    choosing = State()
    quantity = State()
    add_more = State()
    collecting_name = State()
    collecting_phone = State()
    collecting_city = State()  # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü–í–ó
    choosing_pvz = State()     # –í—ã–±–æ—Ä –ü–í–ó
    waiting_payment = State()
    awaiting_order_confirmation = State()
    waiting_payment_confirmation = State()
    entering_track_number = State() 

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
def info_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–∑—ã–≤—ã", url="https://t.me/GoldAstraShop")],
        [InlineKeyboardButton(text="üì¶ –û–ø—Ç (–æ—Ç 20 –∫–≥)", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –ê–≤–∏—Ç–æ", url="https://www.avito.ru/brands/i151719409?src=sharing")],
        [InlineKeyboardButton(text="‚ùì –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?", url="https://telegra.ph/Dobro-pozhalovat-v-magazin-Astrahanskoe-Zoloto-05-07")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ¬´–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –∑–æ–ª–æ—Ç–æ¬ª!</b>\n\n"
        "üêü –°–≤–µ–∂–∞—è –∏–∫—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –°–î–≠–ö.\n"
        "‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 1 –∫–≥ (–º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –ò–Ω—Ñ–æ
@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def send_info(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî <b>–ø–∏—à–∏—Ç–µ</b>, –º—ã –æ—Ç–≤–µ—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!\n\n"
        "üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: <b>@oh_my_nami\n</b>"
        "üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: \n"
        "<b>@GoldAstraShop</b>\n"
        "üì¶ –û–ø—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–æ—Ç 20 –∫–≥): <b>@oh_my_nami</b>\n\n"
        
        "<a href='https://t.me/c/2600077572/3'>üì¶ –û –¥–æ—Å—Ç–∞–≤–∫–µ</a>\n"
        "<a href='https://t.me/c/2600077572/4'>‚ùÑÔ∏è –î–æ–µ–¥–µ—Ç –ª–∏ –∏–∫—Ä–∞ —Å–≤–µ–∂–µ–π?</a>",
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –ó–æ–ª–æ—Ç–æ</b>! üêüüíõ",
        reply_markup=info_menu()
    )
# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def products_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêü –ò–∫—Ä–∞ —â—É–∫–∏ ‚Äì 2450‚ÇΩ / 0.5–∫–≥", callback_data="item_1")],
        [InlineKeyboardButton(text="üé® –ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è ‚Äì 3000‚ÇΩ / 0.5–∫–≥", callback_data="item_2")]
    ])

# –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
def quantity_buttons(qty: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{qty}"),
            InlineKeyboardButton(text=f"{qty}", callback_data="noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{qty}")
        ],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_qty")]
    ])

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
def next_step_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="edit_order")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data="proceed")]
    ])
product_info = {
    "1": {
        "name": "üêü <b>–ò–∫—Ä–∞ —â—É–∫–∏</b>",
        "price":2450,
        "photo": "images/pike.jpg",
        "desc": (
            "‚ú® <b>–û—Ö–ª–∞–∂–¥—ë–Ω–Ω–∞—è, —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è</b>\n"
            "–°–æ—Å—Ç–∞–≤: <b>–∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å</b>.\n"
            "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
            "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
            "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
            "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
            "‚Ä¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b>\n\n"
            "üëå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –∏–∫—Ä–∞ —â—É–∫–∏ ‚Äî –¥–µ–ª–∏–∫–∞—Ç–µ—Å —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –Ω–µ–∂–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π. "
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –∫ –ª—é–±–æ–º—É –±–ª—é–¥—É –∏ —É–∫—Ä–∞—à–∞–µ—Ç –ª—é–±–æ–π —Å—Ç–æ–ª."
        )
    },
    "2": {
        "name": "üé® <b>–ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è</b>",
        "price": 3000,
        "photo": "images/pike_colored.jpg",
        "desc": (
            "‚ú® <b>–°–æ—Å—Ç–∞–≤:</b> –∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å, –∫—Ä–∞—Å–∏—Ç–µ–ª—å –í–ê–†–≠–õ–¨.\n"
            "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
            "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
            "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
            "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
            "‚Ä¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b>\n\n"
            "üëå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–∫—Ä–∞ —â—É–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä–∞—Å–∏—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞. "
            "–Ø—Ä–∫–∏–π –≤–∫—É—Å –∏ –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ —Å—Ç–æ–ª–∞."
        )
    }
}

@router.message(F.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def choose_product(message: Message, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await state.update_data(cart=[], total_weight=0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_menu())


@router.callback_query(F.data.startswith("item_"))
async def handle_item(call: CallbackQuery, state: FSMContext):
    item_id = call.data.split("_")[1]
    selected = product_info.get(item_id)
    if not selected:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(selected_product=selected, qty=1)

    photo = FSInputFile(selected["photo"])
    await call.message.answer_photo(
        photo,
        caption=f"{selected['name']}\n<b>–¶–µ–Ω–∞:</b> {selected['price']}‚ÇΩ / 0.5 –∫–≥\n\n{selected['desc']}"
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫ (–ø–æ 0.5 –∫–≥):", reply_markup=quantity_buttons(1))
    await state.set_state(OrderStates.quantity)
    await call.answer()


@router.callback_query(F.data.startswith("increase_"))
async def increase_quantity(call: CallbackQuery, state: FSMContext):
    qty = int(call.data.split("_")[1]) + 1
    await state.update_data(qty=qty)
    await call.message.edit_reply_markup(reply_markup=quantity_buttons(qty))
    await call.answer()

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(call: CallbackQuery, state: FSMContext):
    qty = max(1, int(call.data.split("_")[1]) - 1)
    await state.update_data(qty=qty)
    await call.message.edit_reply_markup(reply_markup=quantity_buttons(qty))
    await call.answer()


@router.callback_query(F.data == "confirm_qty")
async def confirm_quantity(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product = data["selected_product"]
    qty = data["qty"]
    weight = qty * 0.5
    # –£–ø–∞–∫–æ–≤–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç–Ω–æ
    packaging_weight = 0.8 if not data.get("cart") else 0
    full_weight = weight + packaging_weight

    new_item = {
        "name": product["name"],
        "qty": qty,
        "weight": full_weight,
        "sum": product["price"] * qty
    }

    cart = data.get("cart", [])
    cart.append(new_item)

    total_weight = sum(i["weight"] for i in cart)
    await state.update_data(cart=cart, total_weight=total_weight)

    await call.message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: {product['name']} ‚Äî {qty} —à—Ç.",
        reply_markup=next_step_menu()
    )
    await state.set_state(OrderStates.add_more)
    await call.answer()
import requests

# ‚Äî‚Äî‚Äî –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä ‚Äî‚Äî‚Äî
@router.callback_query(F.data == "add_more")
async def add_more_items(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_menu())
    await callback.answer()

# ‚Äî‚Äî‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî‚Äî‚Äî (—É–¥–∞–ª–∏–º –≤—Å—ë –∏ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞)
@router.callback_query(F.data == "edit_order")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cart=[], total_weight=0)
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ:", reply_markup=products_menu())
    await state.set_state(OrderStates.choosing)
    await callback.answer()

# ‚Äî‚Äî‚Äî –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚Äî‚Äî‚Äî
@router.callback_query(F.data == "proceed")
async def proceed_to_checkout(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.collecting_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:")
    await callback.answer()

@router.message(OrderStates.collecting_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderStates.collecting_phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567)"
    )

# ‚Äî‚Äî‚Äî –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî‚Äî‚Äî
@router.message(OrderStates.collecting_phone)
async def get_phone(message: Message, state: FSMContext):
    phone = re.sub(r"[^\d+]", "", message.text.strip())  # —É–¥–∞–ª–∏–º –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    if not re.fullmatch(r"\+7\d{10}", phone):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return

    await state.update_data(phone=phone)
    await state.set_state(OrderStates.collecting_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ü–í–ó –°–î–≠–ö:")

 # ‚Äî‚Äî‚Äî –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–∫–∞–∑ –ü–í–ó ‚Äî‚Äî‚Äî
@router.message(OrderStates.collecting_city)
async def get_city(message: Message, state: FSMContext):
    city = message.text.strip()
    pvz_list = get_delivery_points(city)

    if not pvz_list:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ü–í–ó –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(city=city, pvz_list=pvz_list[:10])  # –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 10
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{p['address']}",
                callback_data=f"pvz_{p['code']}"
            )] for p in pvz_list[:10]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –ø—É–Ω–∫—Ç –°–î–≠–ö:", reply_markup=keyboard)
    await state.set_state(OrderStates.choosing_pvz)

# ‚Äî‚Äî‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–í–ó ‚Äî‚Äî‚Äî
@router.callback_query(F.data.startswith("pvz_"))
async def select_pvz(callback: CallbackQuery, state: FSMContext):
    code = callback.data.split("_")[1]
    data = await state.get_data()
    chosen = next((p for p in data["pvz_list"] if p["code"] == code), None)

    if not chosen:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ü–í–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(pvz_code=code, pvz_address=chosen["address"])
    await callback.message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –ü–í–ó: {chosen['address']}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
    )
    await state.set_state(OrderStates.confirming)
    await callback.answer()
   
from aiogram.types import InputMediaPhoto

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    name = data.get("name")
    phone = data.get("phone")
    city = data.get("city")
    pvz_address = data.get("pvz_address")
    cart = data.get("cart", [])
    total_weight = 0
    total_price = 0

    product_lines = []
    for item in cart:
        name_ = item["name"]
        qty = item["qty"]
        price = item["sum"] // item["qty"]
        weight = item["weight"]
        total_item_price = price * qty
        total_item_weight = weight * qty
        total_price += item["sum"]
        total_weight += item["weight"]
        product_lines.append(f"{name_} ‚Äî {qty} —à—Ç.")

    cart_summary = "\n".join(product_lines)
    user_text = (
        f"<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
        f"{cart_summary}\n\n"
        f"üì¶ –ì–æ—Ä–æ–¥: {city}\n"
        f"üè™ –ü–í–ó: {pvz_address}\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí∞ –°—É–º–º–∞: {total_price} ‚ÇΩ\n"
    )
    await state.update_data(address=pvz_address)
    await state.set_state(OrderStates.awaiting_order_confirmation)

    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_order"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order"
            )
        ]
    ]
)

    await callback.message.answer(
        "üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        "üßä –í –∫–∞–∂–¥—É—é —É–ø–∞–∫–æ–≤–∫—É –¥–æ–±–∞–≤–ª–µ–Ω —Ö–ª–∞–¥–æ—ç–ª–µ–º–µ–Ω—Ç, –∏–∫—Ä–∞ –¥–æ–µ–∑–∂–∞–µ—Ç –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
        "üìÖ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–æ—Ä–æ–¥–∞ (3‚Äì5 –¥–Ω–µ–π –≤ —Å—Ä–µ–¥–Ω–µ–º).\n"
        "<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:</b>\n"
        "üîπ <b>2200 7009 7421 6722</b>\n"
        "üîπ <b>–ê–Ω–∞—Ç–æ–ª–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á</b>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª)</b> –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    await state.set_state(OrderStates.waiting_payment_confirmation)
    await callback.answer()

@router.message(OrderStates.waiting_payment_confirmation)
async def handle_payment(message: Message, state: FSMContext):
    if not (message.photo or message.document):
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –∏–ª–∏ <b>—Ñ–∞–π–ª</b> —Å —á–µ–∫–æ–º."
        )
        return
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
    await state.update_data(user_id=message.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm:{message.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{message.from_user.id}")
        ]
    ])

    caption = f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {message.from_user.id})\n" \
              f"üí≥ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω."

    if message.photo:
        await message.bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=kb)
    elif message.document:
        await message.bot.send_document(ADMIN_ID, message.document.file_id, caption=caption, reply_markup=kb)

    await state.set_state(OrderStates.waiting_admin_response)

# –ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ç—Ä–µ–∫–∞
@router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_start_track_input(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(confirming_user=user_id)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:")
    await state.set_state(OrderStates.entering_track_number)
    await callback.answer()

# –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
@router.message(OrderStates.entering_track_number)
async def handle_track_number_input(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("confirming_user")
    track_number = message.text.strip()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –°–î–≠–ö
    cdek_client = CDEKClient()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫–∏
    sender_city_code = data.get("sender_city_code", 44)  # –ø–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    receiver_city_code = data.get("receiver_city_code", 44)
    receiver_address = data.get("receiver_address", "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    receiver_name = data.get("receiver_name", "–ò–º—è –ü–æ–ª—É—á–∞—Ç–µ–ª—è")
    receiver_phone = data.get("receiver_phone", "+79001234567")

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    shipment_response = await cdek_client.create_shipment(
        sender_city_code=sender_city_code,
        receiver_city_code=receiver_city_code,
        receiver_address=receiver_address,
        receiver_name=receiver_name,
        receiver_phone=receiver_phone,
        order_number=f"ORDER-{user_id}-{track_number}",
        package_weight=500
    )

    await cdek_client.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if shipment_response.get("uuid"):
        await message.bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
            f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: <b>{track_number}</b>\n"
            f"üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –°–î–≠–ö."
        )
        await message.answer("üì® –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")
    else:
        await message.bot.send_message(
            user_id,
            "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
