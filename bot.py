import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,BotCommand, BotCommandScopeDefault, MenuButtonCommands 
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1780044773"))  

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# ---- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ----
class OrderStates(StatesGroup):
    choosing = State()
    quantity = State()
    add_more = State()
    collecting_name = State()
    collecting_phone = State()
    collecting_address = State()
    waiting_payment = State()

# ---- –ö–Ω–æ–ø–∫–∏ ----
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

def products_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∫—Ä–∞ —â—É–∫–∏ ‚Äì 2450‚ÇΩ / 0.5–∫–≥", callback_data="item_1")],
        [InlineKeyboardButton(text="–ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è ‚Äì 3000‚ÇΩ / 0.5–∫–≥", callback_data="item_2")]
    ])

def next_step_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="proceed")]
    ])

def info_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É", url="https://telegra.ph/Dobro-pozhalovat-v-magazin-Astrahanskoe-Zoloto-05-07")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url="https://t.me/GoldAstraShop")],
        [InlineKeyboardButton(text="üì¶ –û–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –ê–≤–∏—Ç–æ", url="https://www.avito.ru/brands/i151719409?src=sharing")]
    ])

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----

@dp.message(F.text, F.text.in_(['/start', 'start']))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ¬´–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –∑–æ–ª–æ—Ç–æ¬ª!</b>\n\n"
        "üêü –°–≤–µ–∂–∞—è –∏–∫—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –°–î–≠–ö.\n\n"
        "‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 1 –∫–≥ (–º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def send_info(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî <b>–ø–∏—à–∏—Ç–µ</b>, –º—ã –æ—Ç–≤–µ—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!\n\n"
        "üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: <b>@oh_my_nami\n</b>"
        "üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: <b>@GoldAstraShop</b>\n"
        "üì¶ –û–ø—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–æ—Ç 20 –∫–≥): <b>@oh_my_nami</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –ó–æ–ª–æ—Ç–æ</b>! üêüüíõ",
        reply_markup=info_menu()  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )

def info_menu():
    return InlineKeyboardMarkup(inline_keyboard=[  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É", url="https://telegra.ph/Dobro-pozhalovat-v-magazin-Astrahanskoe-Zoloto-05-07")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url="https://t.me/GoldAstraShop")],
        [InlineKeyboardButton(text="üì¶ –û–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑", url="https://t.me/oh_my_nami")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –ê–≤–∏—Ç–æ", url="https://www.avito.ru/brands/i151719409?src=sharing")]
    ])



@dp.message(F.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def choose_product(message: Message, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await state.update_data(cart=[], total_weight=0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫—Ä—É:", reply_markup=products_menu())

@dp.callback_query(F.data.startswith("item_"))
async def handle_item(call: CallbackQuery, state: FSMContext):
    item = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    product_info = {
        "1": {
            "name": "üêü <b>–ò–∫—Ä–∞ —â—É–∫–∏</b>",
            "price": 2450,
            "photo": "images/pike.jpg",
            "desc": (
                "‚ú® <b>–û—Ö–ª–∞–∂–¥—ë–Ω–Ω–∞—è, —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è</b>\n"
                "–°–æ—Å—Ç–∞–≤: <b>–∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å</b>.\n"
                "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
                "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
                "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
                "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
                "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b> / 548 –∫–î–∂\n\n"
                "üëå <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "–ò–∫—Ä–∞ —â—É–∫–∏ ‚Äî —ç—Ç–æ –¥–µ–ª–∏–∫–∞—Ç–µ—Å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∏ –±–æ–≥–∞—Ç—ã–º —Å–æ—Å—Ç–∞–≤–æ–º. "
                "–û–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –ª—é–±–æ–º—É —Å—Ç–æ–ª—É –∏ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–∫—É—Å–æ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è."
            )
        },
        "2": {
            "name": "üé® <b>–ò–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è</b>",
            "price": 3000,
            "photo": "images/pike_colored.jpg",
            "desc": (
                "‚ú® <b>–°–æ—Å—Ç–∞–≤:</b> –∏–∫—Ä–∞ —â—É–∫–∏, —Å–æ–ª—å, –∫—Ä–∞—Å–∏—Ç–µ–ª—å –í–ê–†–≠–õ–¨.\n"
                "–í–µ—Å: <b>0.5 –∫–≥</b>\n\n"
                "üîã <b>–ö–ë–ñ–£ (–Ω–∞ 100 –≥):</b>\n"
                "‚Ä¢ –ë–µ–ª–∫–∏: <b>26 –≥</b>\n"
                "‚Ä¢ –ñ–∏—Ä—ã: <b>3 –≥</b>\n"
                "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: <b>131 –∫–∫–∞–ª</b> / 548 –∫–î–∂\n\n"
                "üëå <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "–ù–∞—Å—ã—â–µ–Ω–Ω–∞—è –∏ —è—Ä–∫–∞—è –∏–∫—Ä–∞ —â—É–∫–∏ –∫—Ä–∞—à–µ–Ω–∞—è –ø—Ä–∏–≤–Ω–µ—Å–µ—Ç –≤ –≤–∞—à—É —Ç—Ä–∞–ø–µ–∑—É —è—Ä–∫–∏–µ –∫—Ä–∞—Å–∫–∏ –∏ –≤–∫—É—Å! "
                "–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö –Ω–µ–æ–±—ã—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–µ–ª–∏–∫–∞—Ç–µ—Å–æ–º."
            )
        }
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID
    if item in product_info:
        selected_product = product_info[item]
        await state.update_data(selected_product=selected_product)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        photo = FSInputFile(selected_product["photo"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        await call.message.answer_photo(
            photo=photo,
            caption=f"<b>{selected_product['name']}</b>\n{selected_product['desc']}\n–¶–µ–Ω–∞: {selected_product['price']}‚ÇΩ / 0.5–∫–≥"
        )
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫ (–ø–æ 0.5 –∫–≥):")
        await state.set_state(OrderStates.quantity)
        await call.answer()

    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await call.message.answer("‚ùóÔ∏è–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderStates.quantity)
async def process_quantity(message: Message, state: FSMContext):
    try:
        qty = int(message.text.strip())
        data = await state.get_data()
        product = data["selected_product"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        weight = qty * 0.5
        new_item = {
            "name": product["name"],  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
            "qty": qty,
            "weight": weight,
            "sum": product["price"] * qty
        }

        cart = data.get("cart", [])
        cart.append(new_item)
        total_weight = sum(item['weight'] for item in cart)

        await state.update_data(cart=cart, total_weight=total_weight)
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product['name']} ‚Äî {qty} —à—Ç. ({weight} –∫–≥)\n\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {total_weight} –∫–≥",
            reply_markup=next_step_menu()
        )
        await state.set_state(OrderStates.add_more)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫.")


@dp.callback_query(F.data == "add_more")
async def add_more_items(call: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.choosing)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_menu())
    await call.answer()

@dp.callback_query(F.data == "proceed")
async def proceed_to_checkout(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("total_weight", 0) < 1:
        await call.message.answer("‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 1 –∫–≥. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ç–æ–≤–∞—Ä.")
        return
    await state.set_state(OrderStates.collecting_name)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await call.answer()

@dp.message(OrderStates.collecting_name)
async def collect_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.collecting_phone)

@dp.message(OrderStates.collecting_phone)
async def collect_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–î–≠–ö):")
    await state.set_state(OrderStates.collecting_address)

@dp.message(OrderStates.collecting_address)
async def collect_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    data = await state.get_data()

    text = "üßæ <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
    total = 0
    for item in data['cart']:
        text += f"{item['name']} ‚Äî {item['qty']} —à—Ç. ({item['weight']} –∫–≥) = {item['sum']}‚ÇΩ\n"
        total += item['sum']

    text += f"\n<b>–û–±—â–∏–π –≤–µ—Å:</b> {data['total_weight']} –∫–≥"
    text += f"\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total} ‚ÇΩ"

    await message.answer(text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º", callback_data="pay_manual")]
        ])
    )
    await state.set_state(OrderStates.waiting_payment)

@dp.callback_query(F.data == "pay_manual")
async def pay_manual(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n\n"
        "<b>–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:</b> 2200700974216722\n"
        "<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b>–ê–Ω–∞—Ç–æ–ª–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n\n"
        "<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ —Å—é–¥–∞. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –ø—Ä–∏–º–µ–º –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É</b>."
    )
    await call.answer()

@dp.message(OrderStates.waiting_payment)
async def receive_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.photo or message.document:
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        admin_text = f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        for item in data['cart']:
            admin_text += f"{item['name']} ‚Äî {item['qty']} —à—Ç. = {item['sum']}‚ÇΩ\n"
        admin_text += (
            f"\n<b>–í–µ—Å:</b> {data['total_weight']} –∫–≥"
            f"\n<b>–°—É–º–º–∞:</b> {sum(i['sum'] for i in data['cart'])} ‚ÇΩ"
            f"\n\n<b>–ò–º—è:</b> {data['name']}"
            f"\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}"
            f"\n<b>–ê–¥—Ä–µ—Å (–°–î–≠–ö):</b> {data['address']}"
        )

        await bot.send_message(chat_id=ADMIN_ID, text=admin_text)

        if message.photo:
            photo_file_id = message.photo[-1].file_id
            await bot.send_photo(chat_id=ADMIN_ID, photo=photo_file_id, caption="–ß–µ–∫")
        elif message.document:
            await bot.send_document(chat_id=ADMIN_ID, document=message.document.file_id, caption="–ß–µ–∫")

        await state.clear()
    else:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —á–µ–∫–∞.")

@dp.startup()
async def on_startup(dispatcher):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands(
        commands=[
            BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        ],
        scope=BotCommandScopeDefault()
    )

    # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        

# ---- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    dp.run_polling(bot, on_startup=on_startup)

